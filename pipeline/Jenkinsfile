node {
    deleteDir()
    dir("source") {
        checkout scm
        stage("Determine products and tests to run.") {
            def diffResult = sh(returnStdout: true, script: "git diff origin/master... --name-only")
            def diffs = diffResult.split('\n')
            def productsRegex = /products\/(.*?)\/.*/
            def testsRegex = /tests\/(.*?)\/.*/
            productsToBuild = [] as Set
            testsToRun = [] as Set
            def availableTests = sh (
                script: 'find tests/ -maxdepth 1 -type d | sed -r "s|tests/||"',
                returnStdout: true
            ).split('\n')

            diffs.each {
                def product = it.trim() =~ productsRegex
                if(product.matches()) {
                    productsToBuild.add(product[0][1])
                }
                def test = it.trim() =~ testsRegex
                if(test.matches()) {
                    testsToRun.add(test[0][1])
                }
            }
            print("products to build: " + productsToBuild)

            for(String availableTest : availableTests) {
                for(String productToBuild : productsToBuild) {
                    if(availableTest) {
                        def monoRepoJson = readJSON file: 'tests/' + availableTest + '/monorepo.json'
                        if(monoRepoJson.requiredProducts.contains(productToBuild)) {
                            testsToRun.add(availableTest)
                        }
                    }
                }
            }
            
            print("tests to run: " + testsToRun)

            productsToDeploy = [] as Set<String>
            testsToRun.each {
                def monoRepoJson = readJSON file: 'tests/' + it + '/monorepo.json'
                productsToDeploy = productsToDeploy + monoRepoJson.requiredProducts
            }

            productsToDeploy = productsToDeploy + productsToBuild
            print("products to deploy: " + productsToDeploy)
        }

        stage("Prepare product stages")  {
            productStageDefinitionMap = [:]
            productsToBuild.each {
                builder = load("products/${it}/builder.groovy")
                productStageDefinitionMap.put(it, builder.build())
            }
        }
        parallel(productStageDefinitionMap)
    }

    dir("deploy") {
        stage("Create namespace") {
            git branch: 'main', url: 'git@github.com:nrg500/cluster.git', credentialsId: 'github-ssh'
            if(BRANCH_NAME && BRANCH_NAME != "main") {
                sh "mkdir namespaces/$BRANCH_NAME || true"

                def namespace = [
                    "apiVersion": "v1",
                    "kind": "Namespace",
                    "metadata": [
                        "name": "${BRANCH_NAME}"
                    ]
                ]
                writeYaml file: "namespaces/${BRANCH_NAME}/namespace.yaml", data: namespace, overwrite: true
            
                def kustomization = [
                    "apiVersion": "kustomize.config.k8s.io/v1beta1",
                    "kind": "Kustomization",
                    "namespace": "${BRANCH_NAME}",
                    "resources": ["namespace.yaml"],
                    "bases": []
                ]
                productsToDeploy.each {
                    if(fileExists("namespaces/main/${it}-ingress.yaml")) {
                        sh "cp namespaces/main/${it}-ingress.yaml namespaces/${BRANCH_NAME}/"
                        kustomization.resources.add("${it}-ingress.yaml");
                        sh """sed -i -E 's/`(.*).berwout.nl`/`${BRANCH_NAME}-\\1.berwout.nl`/g' namespaces/${BRANCH_NAME}/${it}-ingress.yaml"""
                        sh """sed -i -E 's/`www.berwout.nl`/`www.${BRANCH_NAME}-berwout.nl`/g' namespaces/${BRANCH_NAME}/${it}-ingress.yaml"""
                    }
                    kustomization.bases.add("../../services/${it}")
                }
                writeYaml file: "namespaces/${BRANCH_NAME}/kustomization.yaml", data: kustomization, overwrite: true

                def clusterYaml = readYaml file: "kustomization.yaml"
                if(!("namespaces/${BRANCH_NAME}" in clusterYaml.bases)) {
                    print "namespaces/${BRANCH_NAME}" in clusterYaml.bases
                    print clusterYaml.bases.contains("namespaces/${BRANCH_NAME}")
                    print clusterYaml.find{e -> e.equalsIgnoreCase("namespaces/${BRANCH_NAME}")}
                    print clusterYaml.bases
                    clusterYaml.bases.add("namespaces/${BRANCH_NAME}")
                }
                writeYaml file: "kustomization.yaml", data: clusterYaml, overwrite: true
            }
        }
        stage("update environment repo"){
            sshagent(credentials: ['github-ssh']) {
                sh """#/bin/bash +e
                git add .
                git status | grep modified
                if [ \$? -eq 0 ]
                then
                    set -e
                    git config --global user.email "jenkins@berwout.nl"
                    git config --global user.name "nrg500"
                    git commit -am "Updated $BRANCH_NAME namespace for build $BUILD_NUMBER"
                    git branch --set-upstream-to=origin/main main
                    git pull --rebase
                    git push
                else
                    set -e
                    echo "No changes since last run"
                fi
                """
            }
        }
        stage("Run deployment") {
            build "../deploy"
        }
    }
    dir("source") {
        stage ("Prepare test stages") {
            testStageDefinitionMap = [:]
            testsToRun.each {
                builder = load("tests/${it}/builder.groovy")
                testStageDefinitionMap.put(it, builder.build())
            }
        }
        parallel(testStageDefinitionMap)
    }
}